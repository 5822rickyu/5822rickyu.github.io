[{"title":"测试","path":"/2025/08/21/这是个测试/","content":"用来测试的一页$$\\int_{0}^{\\infty} x^2 e^{-x} dx 2$$","tags":["a","b","c"],"categories":["测试"]},{"title":"markdown标记语言","path":"/2025/05/23/markdown标记语言/","content":"关于markdown标记语言的技巧创建段落分隔换行通过多个空格加回车键强调语法添加星号即可试试斜体试试粗斜体 创建块引用,this is a test 内部嵌套 内部搭建 有序列表 ceshi 无序列表需要空格控制 测试"},{"title":"关于","path":"/about/index.html","content":"RickYu拥抱未来 喜欢探索数学和计算机结合的领域。平时会写博客分享学习笔记和项目经验. 保持热爱"},{"path":"/lxh_files/iframe.html","content":"Cross Origin Local Storage ;(function () { 'use strict' var COLS_GET = 'COLS_GET' var COLS_SET = 'COLS_SET' var COLS_RM = 'COLS_RM' var COLS_KEYS = 'COLS_KEYS' var COLS_CLR = 'COLS_CLR' var COLS_LIS = 'COLS_LIS' // add listener var COLS_LIS_UN = 'COLS_LIS_UN' // remove listener var COLS_RES = 'COLS_RES' var listenMap = {} window.addEventListener('storage', function (e) { if (listenMap[e.key]) { listenMap[e.key].forEach(function (v) { var _v$ return (_v$ = v[1]) === null || _v$ === void 0 ? void 0 : _v$.call(v, e.newValue) }) } }) var response = function response(e, value) { e.source.postMessage( { type: COLS_RES, id: e.data.id, key: e.data.key, value: value, }, e.origin ) } window.addEventListener('message', function (e) { var _e$data = e.data, type = _e$data.type, id = _e$data.id, key = _e$data.key try { switch (type) { case COLS_SET: { localStorage.setItem(key, e.data.value) response(e) break } case COLS_GET: { response(e, localStorage.getItem(key)) break } case COLS_RM: { localStorage.removeItem(key) response(e) break } case COLS_KEYS: { var prefix = e.data.key + ':' var keys = Object.keys(localStorage).filter(function (v) { return v.indexOf(prefix) === 0 }) response(e, keys) break } case COLS_CLR: { var _prefix = e.data.key + ':' var _keys = Object.keys(localStorage).filter(function (v) { return v.indexOf(_prefix) === 0 }) _keys.forEach(function (v) { return localStorage.removeItem(v) }) response(e) break } case COLS_LIS: { var handler = function handler(value) { response(e, value) } if (listenMap[key]) { listenMap[key].push([id, handler]) } else { listenMap[key] = [[id, handler]] } break } case COLS_LIS_UN: { if (listenMap[key]) { listenMap[key] = listenMap[key].filter(function (v) { return v[0] !== id }) } break } } } catch (err) { response(e) } }) })()"}]